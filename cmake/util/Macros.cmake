function(AddSourceDirectory var)
	# - Add a directory to the current project.
	string(REGEX REPLACE "/" "\\\\" locale_SourceGroupPath ${ARGV2} )
	list(LENGTH ARGN num_of_args)
	if (${num_of_args} EQUAL 3)
		file(GLOB locale_files RELATIVE ${ARGV3} ${ARGV1}/[^.]*.cc ${ARGV1}/[^.]*.cpp ${ARGV1}/[^.]*.c)
	else()
		file(GLOB locale_files ${ARGV1}/[^.]*.cc ${ARGV1}/[^.]*.cpp ${ARGV1}/[^.]*.c)
	endif()
	source_group(${locale_SourceGroupPath} FILES ${locale_files})	
	set("${var}" ${locale_files} PARENT_SCOPE)
endfunction()

function(AddHeaderDirectory var)	
	# - Add a directory to the current project.
	string(REGEX REPLACE "/" "\\\\" locale_HeaderGroupPath ${ARGV2} )
	list(LENGTH ARGN num_of_args)
	if (${num_of_args} EQUAL 3)	
		file(GLOB locale_files RELATIVE ${ARGV3} ${ARGV1}/[^.]*.h ${ARGV1}/[^.]*.hpp)
	else()
		file(GLOB locale_files ${ARGV1}/[^.]*.h ${ARGV1}/[^.]*.hpp)
	endif()
	source_group(${locale_HeaderGroupPath} FILES ${locale_files})	
	set("${var}" ${locale_files} PARENT_SCOPE)
endfunction()

function(AddAssemberDirectory var)	
	# - Add a directory to the current project.
	string(REGEX REPLACE "/" "\\\\" locale_HeaderGroupPath ${ARGV2} )
	list(LENGTH ARGN num_of_args)
	if (${num_of_args} EQUAL 3)	
		file(GLOB locale_files RELATIVE ${ARGV3} ${ARGV1}/[^.]*.s ${ARGV1}/[^.]*.asm)
	else()
		file(GLOB locale_files ${ARGV1}/[^.]*.s ${ARGV1}/[^.]*.asm)
	endif()
	source_group(${locale_HeaderGroupPath} FILES ${locale_files})	
	set("${var}" ${locale_files} PARENT_SCOPE)
	set_property(SOURCE ${locale_files} PROPERTY LANGUAGE ASM)	
endfunction()

function(AddHeaderDirectoryRecursive var)	
	# - Add a directory to the current project.
	string(REGEX REPLACE "/" "\\\\" locale_HeaderGroupPath ${ARGV2} )
	list(LENGTH ARGN num_of_args)
	if (${num_of_args} EQUAL 3)		
		file(GLOB_RECURSE locale_files RELATIVE ${ARGV3} ${ARGV1}/[^.]*.h ${ARGV1}/[^.]*.hpp)
	else()
		file(GLOB_RECURSE locale_files ${ARGV1}/[^.]*.h ${ARGV1}/[^.]*.hpp)
	endif()
	foreach(hdr ${locale_files})
	    string(REGEX REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/${ARGV1}" "" REL_DIR "${hdr}")
		string(REGEX REPLACE "[\\\\/][^\\\\/]*$" "" REL_DIR "${REL_DIR}")		
		string(REGEX REPLACE "^[\\\\/]" "" REL_DIR "${REL_DIR}")
		string(REGEX REPLACE "/" "\\\\" REL_DIR "${REL_DIR}" )
		source_group("${ARGV2}\\${REL_DIR}" FILES ${hdr})
	endforeach()
	set("${var}" ${locale_files} PARENT_SCOPE)
endfunction()

function(AddSourceDirectoryRecursive var)	
	# - Add a directory to the current project.
	string(REGEX REPLACE "/" "\\\\" locale_SourceGroupPath ${ARGV2} )
	list(LENGTH ARGN num_of_args)
	if (${num_of_args} EQUAL 3)		
		file(GLOB_RECURSE locale_files RELATIVE ${ARGV3} ${ARGV1}/[^.]*.cc ${ARGV1}/[^.]*.cpp ${ARGV1}/[^.]*.c)
	else()
		file(GLOB_RECURSE locale_files ${ARGV1}/[^.]*.cc ${ARGV1}/[^.]*.cpp ${ARGV1}/[^.]*.c)
	endif()
	foreach(src ${locale_files})
	    string(REGEX REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/${ARGV1}" "" REL_DIR "${src}")
		string(REGEX REPLACE "[\\\\/][^\\\\/]*$" "" REL_DIR "${REL_DIR}")		
		string(REGEX REPLACE "^[\\\\/]" "" REL_DIR "${REL_DIR}")
		string(REGEX REPLACE "/" "\\\\" REL_DIR "${REL_DIR}" )
		source_group("${ARGV2}\\${REL_DIR}" FILES ${src})
	endforeach()
	set("${var}" ${locale_files} PARENT_SCOPE)
endfunction()

function(AddAssemblerDirectoryRecursive var)	
	# - Add a directory to the current project.
	string(REGEX REPLACE "/" "\\\\" locale_SourceGroupPath ${ARGV2} )
	list(LENGTH ARGN num_of_args)
	if (${num_of_args} EQUAL 3)		
		file(GLOB_RECURSE locale_files RELATIVE ${ARGV3} ${ARGV1}/[^.]*.asm ${ARGV1}/[^.]*.s)
	else()
		file(GLOB_RECURSE locale_files ${ARGV1}/[^.]*.asm ${ARGV1}/[^.]*.s)
	endif()
	foreach(src ${locale_files})
	    string(REGEX REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/${ARGV1}" "" REL_DIR "${src}")
		string(REGEX REPLACE "[\\\\/][^\\\\/]*$" "" REL_DIR "${REL_DIR}")		
		string(REGEX REPLACE "^[\\\\/]" "" REL_DIR "${REL_DIR}")
		string(REGEX REPLACE "/" "\\\\" REL_DIR "${REL_DIR}" )
		source_group("${ARGV2}\\${REL_DIR}" FILES ${src})
		set_property(SOURCE ${src} PROPERTY LANGUAGE ASM)
	endforeach()
	set("${var}" ${locale_files} PARENT_SCOPE)
endfunction()

macro(CreatePrecompiledHeader projectid _header _source _sourceList)
	set(${projectid}_PRECOMPILED_HEADER ${_header})
	set(${projectid}_PRECOMPILED_SOURCE ${_source})
	set(${projectid}_PRECOMPILED_FILES ${_sourceList})
	
    if(MSVC)
		get_filename_component(PrecompiledBasename ${_header} NAME_WE)
		set(PrecompiledBinary "$(IntDir)/${PrecompiledBasename}.pch")
		
		set(Sources ${${_sourceList}})
		set_source_files_properties(${Sources} PROPERTIES COMPILE_FLAGS "/Yu\"${PrecompiledBinary}\" /FI\"${PrecompiledBinary}\" /Fp\"${PrecompiledBinary}\"" OBJECT_DEPENDS "${PrecompiledBinary}")
        set_source_files_properties(${_source} PROPERTIES COMPILE_FLAGS "/Yc\"${_header}\" /Fp\"${PrecompiledBinary}\"" OBJECT_OUTPUTS "${PrecompiledBinary}")		
		list(APPEND ${_sourceList} ${_source})
    endif()
endmacro()

macro(SubDirlist curdir result)
  file(GLOB children RELATIVE ${curdir} ${curdir}/*)
  set(dirlist "")
  foreach(child ${children})
    if(IS_DIRECTORY ${curdir}/${child})
        set(dirlist ${dirlist} ${child})
    endif()
  endforeach()
  set(${result} ${dirlist})
endmacro()

macro(AddPublicInclude projectid addpath)
	set(${projectid}_PUBLIC_INCLUDES "${${projectid}_PUBLIC_INCLUDES} ${addpath}" CACHE INTERNAL "include directories")
	include_directories(${addpath})
endmacro()